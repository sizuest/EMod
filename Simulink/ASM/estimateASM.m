function [ out ] = estimateASM( P, n )
%% SIMULATIONASM
%  ────────────────────────────────────────────────────────────────────────
%  Author:  SZ                  
%  Date:    29.04.2014                              
%  Version: V01R00
%  ────────────────────────────────────────────────────────────────────────
% Run ASM Estimation
%
% Copyright 2014 Inspire AG, ETHZ. All rights reserved

%  ╒═════════╤═════════════╤═════════════╤═══════════════════════════════╕
%  │ VERSION │ DATE        │ AUTHOR      │ DESCRIPTION                   │
%  ╞═════════╪═════════════╪═════════════╪═══════════════════════════════╡
%  │ V01R00  │ 29.04.2014  │ SZ          │ Initial creation              │
%  ├─────────┼─────────────┼─────────────┼───────────────────────────────┤
%  │         │             │             │                               │
%  ╘═════════╧═════════════╧═════════════╧═══════════════════════════════╛

%% Defaults
parameters
bearing.On = 1;


if nargin == 0
    P = 10e3;
    n = 14700;
end

%% OP
Tl = bearing.z.*(bearing.Fs./bearing.Cs).^bearing.y .* bearing.Fb .* bearing.dm;
Tv = ((bearing.nu0*10e6.*n>2000) .* 1.42e-5  .* bearing.f0.* (bearing.nu0*10e6.*n).^(2/3) .* (bearing.dm/0.0254).^3 + ...
      (bearing.nu0*10e6.*n<=2000).* 3.492e-3 .* bearing.f0.* (bearing.dm/0.0254).^3 ) *.113;
T  = bearing.On*sum(Tl + Tv) + P/(n*pi/30);

[U, fs] = operationalPoint(T*n*pi/30, n);

input.U  = U;
input.fs = fs;
input.T  = P/(n*pi/30);
input.w0 = n*pi/30;

printInfo('ASM Simulation', 'title', '')

%% Estimation

% Bearing losses 
out.Analysis.QdotB1 = (Tl(1) + Tv(1)) * n*pi/30;
out.Analysis.QdotB2 = (Tl(2) + Tv(2)) * n*pi/30;
out.Analysis.QdotB3 = (Tl(3) + Tv(3)) * n*pi/30;

% Currents
out.Analysis.IS, ...
out.Analysis.IR, ...
out.Analysis.IH, ...
out.Analysis.IFe

out.Analysis.QdotS, ...
out.Analysis.QdotR, ...
out.Analysis.QdotFe, ...

out.Analysis.QdotTot, ...
out.Analysis.PEl, ...
out.Analysis.PMech, ...
input.U, ...
input.fs, ...
out.Analysis.n , ...
out.Analysis.T, ...
(input.fs-motor.p*out.Analysis.n/60)/input.fs, ...



%% Table
fprintf(...
drawTable({'Value'}, { 'Stator losses [W]', ...
                       'Rotor losses [W]', ...
                       'Iron Losses [W]', ...
                       'Bearing 1 losses [W]', ...
                       'Bearing 2 losses [W]', ...
                       'Bearing 3 losses [W]', ...
                       'Total losses [W]', ...
                       'Electrical power [W]', ...
                       'Mechanical power [W]', ...
                       'Voltage [V]', ...
                       'Frequency [Hz]', ...
                       'Speed [rpm]', ...
                       'Torque [Nm]', ...
                       'Slip [-]', ...
                       'Stator current [A]', ...
                       'Rotor current [A]', ...
                       'Ih current [A]', ...
                       'IFe current [A]'}, ...
                     [  out.Analysis.QdotS, ...
                        out.Analysis.QdotR, ...
                        out.Analysis.QdotFe, ...
                        out.Analysis.QdotB1, ...
                        out.Analysis.QdotB2, ...
                        out.Analysis.QdotB3, ...
                        out.Analysis.QdotTot, ...
                        out.Analysis.PEl, ...
                        out.Analysis.PMech, ...
                        input.U, ...
                        input.fs, ...
                        out.Analysis.n , ...
                        out.Analysis.T, ...
                        (input.fs-motor.p*out.Analysis.n/60)/input.fs, ...
                        out.Analysis.IS, ...
                        out.Analysis.IR, ...
                        out.Analysis.IH, ...
                        out.Analysis.IFe]', 'full') ...
)

end

