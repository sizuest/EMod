function [] = ForcesMain( setName )
% [] = FORCESMAIN( SETNAME )
% ═════════════════════════════════════════════════════════════════════════
% Performs an analysis of simualtion data compared to measurement data, in
% order to provide the key values for model validation.
% ─────────────────────────────────────────────────────────────────────────
% Author:  sizuest                   Copyright (c) 2012 by Inspire AG, ETHZ
% Date:    15.03.2012                All rights reserved
% Version: 1.0
% ═════════════════════════════════════════════════════════════════════════
%
% For the sucessfull execution, two global variabels are required:
%
%   ─ HOMEDIR:  Root folder of the analysis
%   ─ MEASDIR:  Root folder of the measurements
%
% The variable SETNAME referes to the folder in HOMEDIR name with the 
% following structure:
%
%   ─ SETNAME
%       ├─ forces
%       │   ├─ plots [dir]
%       │   ├─ config.csv
%       │   └─ config.m
%       └─ simdata
%           └─ simulation_output.dat
%
% The file "config.csv" maps the measurements to the simulation. The file
% has five columns with the following contents:
%   ─ cutN              Unique identification number, normaly incremented
%                       for each additional measurement
%   ─ measN             Number of the measurement file, -1 if not used
%   ─ cutStartTime      Start of the cut in the Simulation in seconds
%                       realtive to simulation start
%   ─ cutDiameter       Diameter of the wrought part during the cut
%   ─ measStartTime     Time since measurement start in seconds, until the
%                       tool gets in contact with the materil
%
% Configuration of the analysis is done in the file "config.m". This file
% has to provide the following variables:
%
% measDataFile              [string]    Path to the measurement file,
%                                       this is the file generated by
%                                       mergeRawData
% 
% The generated plots and result are stored in the folder "plots"

% setName = '20111209'

% Forces
forces = {'Fx', 'Fy', 'Fz'};
forcesNames = {'F_p', 'F_f', 'F_c'};

%% Path
% Creat std path

% Home and measurement directory
global HOMEDIR;
global MEASDIR;

if isempty(HOMEDIR)
    fprintf('[!] HOMEDIR not set!\n');
    return 
elseif isempty(MEASDIR)
    fprintf('[!] MEASDIR not set!\n');
    return 
end

simFile  = [HOMEDIR '/' setName '/simdata/simulation_output.dat'];
plotDir  = [HOMEDIR '/' setName '/forces/plots/'];

%% Preprocess

% Load configuraiton
run([setName '/forces/config.m'])
config.raw = importdata([setName '/forces/config.csv']);

for i=1:length(config.raw.colheaders)
    config.(config.raw.colheaders{i}) = config.raw.data(:,i);
end

config = rmfield(config, 'raw');

%% Load measurment
measForceData.raw = load(measDataFile);

%% Load Simulation
simForceData = loadSimFile(simFile, {'C1_Torque Value', 'X1_Force Value', 'Z1_Force Value', 'X1_d Value' });

%% Build up measurment vectors

for i=1:length(forces)
    measForceData.(forces{i}).time   = 0;
    measForceData.(forces{i}).values = 0;
    measForceData.(forces{i}).mean   = 0;
end
    
measNames = cell(size(measForceData.raw.data));
for i=1:length(measForceData.raw.data)
    measNames{i} = measForceData.raw.data{i}.name;
end

measN = str2double(regexp(measNames,'[1-9]*[0-9]+$', 'match','once')');

for i=1:size(config.measN,1)
    % Find meas number
    tmp = (measN == config.measN(i));
    
    if any(tmp)
        tmp = find(tmp,1,'first');
        for j=1:length(forces)
            t = measForceData.raw.data{tmp}.(forces{j}).time;
            x = measForceData.raw.data{tmp}.(forces{j}).values;
            m = measForceData.raw.data{tmp}.(forces{j}).mean;
            
            t = t(t>=config.measStartTime(i));
            x = x(t>=config.measStartTime(i));
            
            measForceData.(forces{j}).time   = [measForceData.(forces{j}).time;   t(1)+config.cutStartTime(i)-.1; t+config.cutStartTime(i);                    t(end)+.1+config.cutStartTime(i)];
            measForceData.(forces{j}).values = [measForceData.(forces{j}).values; 0;                              x;                                           0 ];
            measForceData.(forces{j}).mean   = [measForceData.(forces{j}).mean;   0;                              ones(size(x))*m; 0 ];
            measForceData.(forces{j}).mean(isnan(measForceData.(forces{j}).mean)) = 0;
        end 
    end
end

%% Error calculation
% For each cut, calculate the error compared to the mean force


% Cutting force
meas  = interp1(measForceData.Fz.time, measForceData.Fz.values, simForceData.time,'linear',0);
measM = interp1(measForceData.Fz.time, measForceData.Fz.mean, simForceData.time,'linear',0);

idx   = find(simForceData.data(:,1)>0 & meas>20);

relErr.Fz  = -(meas(idx)-simForceData.data(idx,1)./simForceData.data(idx,4)*2000) ./meas(idx);
relErrM.Fz = -(measM(idx)-simForceData.data(idx,1)./simForceData.data(idx,4)*2000) ./measM(idx);


% Feed force
meas  = interp1(measForceData.Fx.time, measForceData.Fx.values, simForceData.time,'linear',0);
measM = interp1(measForceData.Fx.time, measForceData.Fx.mean, simForceData.time,'linear',0);
idx   = find(simForceData.data(:,2)>0 & meas>10);

relErr.Fx  = -(meas(idx)-simForceData.data(idx,2)) ./meas(idx);
relErrM.Fx = -(measM(idx)-simForceData.data(idx,2)) ./measM(idx);


% Passive force
meas  = interp1(measForceData.Fy.time, measForceData.Fy.values, simForceData.time,'linear',0);
measM = interp1(measForceData.Fy.time, measForceData.Fy.mean, simForceData.time,'linear',0);
idx   = find(simForceData.data(:,3)>0 & meas>10);

relErr.Fy  = -(meas(idx)-simForceData.data(idx,3)) ./meas(idx);
relErrM.Fy = -(measM(idx)-simForceData.data(idx,3)) ./measM(idx);


for i=1:length(forces)
    relErr.(forces{i})(isnan(relErr.(forces{i}))) = 0;
    relErrM.(forces{i})(isnan(relErrM.(forces{i}))) = 0;
    relErrM.(forces{i})(isinf(relErrM.(forces{i}))) = 1;
end

%% Plotting

fHandler = [];
fTitles  = {};

fHandler(end+1) = figure;
fTitles{end+1}  = 'CuttingForce';

plot(measForceData.Fz.time, measForceData.Fz.values, ':k'); hold on
plot(simForceData.time, simForceData.data(:,1)./simForceData.data(:,4)*2000,'k');

xlabel('time [s]');
ylabel('force [N]');
title('cutting force');
legend('Measurment', 'Simulation');

axis([0 max(simForceData.time) 0 max(simForceData.data(:,1)./simForceData.data(:,4)*2000)*1.2]);

fHandler(end+1) = figure;
fTitles{end+1}  = 'PassiveForce';

plot(measForceData.Fx.time, measForceData.Fx.values, ':k'); hold on
plot(simForceData.time, simForceData.data(:,2),'k');

xlabel('time [s]');
ylabel('force [N]');
title('feed force');
legend('Measurment', 'Simulation');

axis([0 max(simForceData.time) 0 max(simForceData.data(:,2))*1.2]);


fHandler(end+1) = figure;
fTitles{end+1}  = 'FeedForce';

plot(measForceData.Fy.time, measForceData.Fy.values, ':k'); hold on
plot(simForceData.time, simForceData.data(:,3),'k');

xlabel('time [s]');
ylabel('force [N]');
title('passive force');
legend('Measurment', 'Simulation');

axis([0 max(simForceData.time) 0 max(simForceData.data(:,3))*1.2]);


%% Histogram plots

lines  = {':k','--k','-k'};
% points = {'sk','xk','ok'};

a = Inf;
b = -Inf;
c = 0;

e = cell(size(forces));
n = cell(size(forces));

for i=1:length(forces)
   
    fHandler(end+1) = figure;
    fTitles{end+1}  = ['Error distribution ' forces{i}];

    [n e] = hist(relErr.(forces{i}), ...
                    linspace(mean(relErr.(forces{i})) - 1*std(relErr.(forces{i})), ...
                             mean(relErr.(forces{i})) + 1*std(relErr.(forces{i})), 100));
     
    n  = n/sum(n);
 
    bar(e*100, n*100); hold on; 
    colormap('gray')
    
    xlabel('absolute relative error [%]');
    ylabel('distribution [%]');
    
    grid on
       
end

%% Show mean error:

fprintf('Mean errros:\n');
for i=1:length(forces)
    fprintf('%s: %2.1f%%\n',forces{i}, mean(relErr.(forces{i}))*100);
end

%% save
callerPath = pwd;
cd(plotDir);

for i=1:length(fHandler);
    fprintf(['   >  ' fTitles{i} ' ... ']);
    saveas(fHandler(i), fTitles{i}, 'fig');
%     saveas(fHandler(i), fTitles{i}, 'png');
%     saveas(fHandler(i), fTitles{i}, 'pdf');
%     saveas(fHandler(i), fTitles{i}, 'jpg');
    close(fHandler(i));
    fprintf(' done!\n');
end

cd(callerPath);


end

